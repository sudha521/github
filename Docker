
Developer ----->dockerfile ----->build docker image ---->docker container(will have all applications and dependencies)
                                                                                                                    pull image
                                                    ----> also stored in online cloud repository called "docker hub".--->docker image--->docker container
                            

What is Docker?

Docker is a tool designed to make it easier to create, deploy, and run applications by using containers. 
Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and deploy it as one package.

What is diff b/w docker and kubernetes?

Docker is a platform and tool for building, distributing, and running Docker containers. ... Kubernetes is a container orchestration system for Docker containers 
that is more extensive than Docker Swarm and is meant to coordinate clusters of nodes at scale in production in an efficient manner.

what is an image in Docker?

A Docker image is a read-only template that contains a set of instructions for creating a container that can run on the Docker platform.It provides a convenient
way to package up applications and preconfigured server environments, which you can use for your own private use or share publicly with other Docker users.
Images --->Binaries ,dependencies and metadata.

18. What is Hypervisor?

The hypervisor is a software which allows you to create a virtual environment in which the guest virtual machines operate. 
It controls the guest systems and checks if the resources are allocated to the guests as necessary.

---- Diff b/w Docker and virtualization?

Virtual Machine	                                                               Docker Container

Hardware-level process isolation	                                              OS level process isolation
Each VM has a separate OS	                                                     Each container can share OS
Boots in minutes	                                                              Boots in seconds
VMs are of few GBs	                                                            Containers are lightweight (KBs/MBs)
Ready-made VMs are difficult to find	                                          Pre-built docker containers are easily available
VMs can move to new host easily	                                               Containers are destroyed and re-created rather than moving
Creating VM takes a relatively longer time	                                    Containers can be created in seconds
More resource usage	                                                           Less resource usage

---- What is docker file?
Dockerfile --describes steps to create a docker image. All applications,dependencies are defined in a dockerfile to build docker image.

----What is docker demon and engine?
The Docker daemon ( dockerd ) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes.


Docker Engine is an open source containerization technology for building and containerizing your applications. Docker Engine acts as a client-server application with:
APIs which specify interfaces that programs can use to talk to and instruct the Docker daemon

A server with a long-running daemon process dockerd.
APIs which specify interfaces that programs can use to talk to and instruct the Docker daemon.
A command line interface (CLI) client docker.

---What is copy and add in dockerfile?

COPY and ADD are both Dockerfile instructions that serve similar purposes. They let you copy files from a specific location into a Docker image.

COPY takes in a src and destination. It only lets you copy in a local file or directory from your host (the machine building the Docker image)
into the Docker image itself.

ADD lets you do that too, but it also supports 2 other sources. First, you can use a URL instead of a local file / directory. 
Secondly, you can extract a tar file from the source directly into the destination.



CONTAINER:

 # docker version ---->Gives the version of docker.
 # docker info  ---->Gives the information more than docker version.
## syntax: docker <command> <subcommand> (options).
 # docker container run --publish 80:80 nginx --->downloads the nginx image from docker hub and runs.
 # docker create (image). ----->create a container(without starting it).
 # docker rename oldcon newcon ---->renames the old container name.
 # docker run (image) (command) ---->run a command in a new container
 # docker run --rm (image). ----> removes the container after it exits
 # docker run -td (image) ---->starts a container and keeps it running
 # docker run -it [IMAGE] –--> starts a container and creates an interactive bash shell in the container.
 # docker run -it-rm [IMAGE] –---> creates, starts, and runs a command inside the container. Once it executes the command, the container is removed.
 # docker rm [CONTAINER] ---->Delete a container (if it is not running).
 # docker update [CONTAINER]----> Update the configuration of one or more containers.
 # docker start [CONTAINER] ---->Start a container.
 # docker stop [CONTAINER] ----->Stop a running container.
 # docker restart [CONTAINER] --->Stop a running container and start it up again.
 # docker pause [CONTAINER] ----> Pause processes in a running container.
 # docker unpause [CONTAINER] ---->Unpause processes in a running container.
 # docker wait [CONTAINER] ----> Block a container until others stop (after which it prints their exit codes)
 # docker kill [CONTAINER] ---> Kill a container by sending a SIGKILL to a running container.
 # docker attach [CONTAINER] --->Attach local standard input, output, and error streams to a running container.
 
 # docker container ls ---->shows all running containers  # docker ps --->old
 # docker container ls -a ----> show all running and stopped containers  # docker ps -a ----> old
 # docker container logs ID ----> Opens logs of particular container.  # docker logs [CONTAINER] --->old
 # docker inspect [OBJECT_NAME/ID] ----> lists low level information on Docker objects.
 # docker events [CONTAINER]---->List real-time events from a container
 # docker port [CONTAINER] ---->Show port (or specific) mapping for a container
 # docker top [CONTAINER] ---->Show running processes in a container
 # docker stats [CONTAINER] ---->Show live resource usage statistics of containers
 # docker diff [CONTAINER] ----->Show changes to files (or directories) on a filesystem
 # 
 

IMAGES:

 # docker image ls ---> gives list of existing images in our docker.
 # docker pull nginx ---> It will download the latest image of nginx.
 # docker pull nginx:1.11 --->it will download the specific defined version of nginx. (here 1.11 is a tag).
 # docker pull nginx:1.11-alpine ---> it will download alpine supported nginx which is very small container of unix os.
 # docker history nginx:latest ---> it will give history of nginx image layers. (this command works for the images only exits in our docker)
 Note: Every layer is having its own unique SHA and the files will be stored once in images they will be accessed.
 # docker history mysql ----> Shows history of an image
 # docker history mysql:latest
 # docker image inspect nginx ---> it will gives the metadata of the nginx image.(image ID,tags,exposed ports,env variables and how the image expects to be run etc)
 
 Tags are labels point to the image ID.
 # docker image tag sourceimage(:tag) targetimage(tag) --->syntax.
 # docker image tags --help ---> it will give syntax to use tags.
 # docker image ls --->we can see tags here only
 # docker image tag nginx urmila/nginx ---->way to change the original tag and use our own.
 # docker image ls ---> now you can see the new image with our own tag but image ID is same for both.
 # docker image push urmila/docker ---> used to push our image to docker hub.
 # docker --help ---> gives options to use.
 # docker login ---> ask credentials to login to docker hub.
 # cat .docker/config.json ---> config file contains authentication token(need to be careful when using shared accouts)
 
DOCKER FILE:

 # docker image build -t customnginx .   ----> build the docker image based on docker file steps and it will stores all info in cache and uses it when we run the
   build next time.
 # docker container run -p 80:80 --rm nginx ---> to run the container in normal way.
 # docker image build -t nginx-with-html ---->by running as a build it will be faster becoz stored in cache.
 Note: Now we can create tag to this image and push into our own docker hub.
 # docker import [URL/FILE] ---->Create an image from a tarball.
 # docker commit [CONTAINER] [NEW_IMAGE_NAME] ---->Create an image from a container.
 # docker rmi [IMAGE] ---->Remove an image.
 
 We can build our own dockerfile and run container on it.
 By modifying existing docker file we can say expose on what ever port we want, do changes as our wish and run the container, then we can tag it and push into our
 docker hub.
 # docker push [options] name[:tag] ---> syntax.
 # docker image ls ---> lists our image
 # docker image rm imagetagname ---> it will removes our image from cache need to download again if you want.
 
 Using Prune to Keep Your Docker System Clean (YouTube)
You can use "prune" commands to clean up images, volumes, build cache, and containers. Examples include:

- docker image prune --->to clean up just "dangling" images

- docker system prune ----> will clean up everything

- The big one is usually # docker image prune -a -->which will remove all images you're not using. Use # docker system df ---> to see space usage.

Remember each one of those commands has options you can learn with --help.

Here's a YouTube video I made about it: https://youtu.be/_4QzP7uwtvI

Lastly, realize that if you're using Docker Toolbox, the Linux VM won't auto-shrink. You'll need to delete it and re-create (make sure anything in
docker containers or volumes are backed up). You can recreate the toolbox default VM with # docker-machine rm default   and then # docker-machine create

NETWORK:

# docker network ls --->lists network
# docker network rm [NETWORK] ---->Remove one or more networks
# docker network inspect [NETWORK] ---->Show information on one or more networks
# docker network connect [NETWORK] [CONTAINER] ---->Connects a container to a network
# docker network disconnect [NETWORK] [CONTAINER]. ---->Disconnect a container from a network

---- Difference between run command and entry point?
---- Diff b/w copy and add?
---- Diff b/w Docker and virtualization?

   
---- docker file for nginx and tomcat?
   
 
 
what is docker deamon
what is conterziation
diff between conterization Vs virtulization

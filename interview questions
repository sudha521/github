what is git merge Vs rebase?
Git merge:It will merge changes from two branches at a time when committed
so that conflicts may occur.
Git rebase: It also merges changes from two branches but it will take 
changes from master 


#revert vs reset vs checkout

git revert is used to undo a previous commit. In git, you can't alter or erase an earlier commit. (Actually you can, but it can cause problems.) So instead of editing the earlier commit, revert introduces a new commit that reverses an earlier one.
git reset is used to undo changes in your working directory that haven't been comitted yet.(soft/hard)
git checkout is used to copy a file from some other commit to your current working tree. It doesn't automatically commit the file.

#fetch vs pull

git fetch is similar to pull but doesn't merge. i.e. it fetches remote updates (refs and objects) but your local stays the same (i.e. origin/master gets updated but master stays the same) .
git pull pulls down from a remote and instantly merges.

#bare repo

A bare repository is nothing but the .git folder itself i.e. the contents of a bare repository is same as the contents of .git folder inside your local working repository.

Use bare repository on a remote server to allow multiple contributors to push their work.
Non-bare - The one which has working tree makes sense on the local machine of each contributor of your project.

#cherry picking 

Cherry picking in Git means to choose a commit from one branch and apply it onto another.
This is in contrast with other ways such as merge and rebase which normally apply many commits onto another branch.
Make sure you are on the branch you want to apply the commit to.

git checkout master

Execute the following:

git cherry-pick <commit-hash>

# merge with tag 

git checkout destination_branch
git merge tag_name

# pushing local branch to remote 

If your Local branch and remote branch is the same name then you can just do it:

git push origin branchName
When your local and remote branch name is different then you can just do it:

git push origin localBranchName:remoteBranchName

# adding permissions to specifc github branch 

https://confluence.atlassian.com/bitbucketserver/using-branch-permissions-776639807.html

#git bisect

$ git bisect .. bascically a Git tool for debugging. 'Git Bisect' debugs by going through the previous commits since your last (known) working commit. It uses binary search to go through all those commits, to get to the one which introduced the regression/bug.

$ git bisect start # Starting bisect

$ git bisect bad # stating that the current commit (v1.5) has the regression/ setting 'bad' point

$ git bisect good v1.0 # mentioning it the last good working commit (without regression)